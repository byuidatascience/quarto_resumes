---
format:
  html:
    toc: true
    grid:
      sidebar-width: 50px
      body-width: 800px
      margin-width: 200px
      gutter-width: 1.5rem
  pdf:
    pdf-engine: weasyprint
css: cv.css
execute:
  echo: false
format-links: [pdf]
---

```{python}
import sys
import polars as pl
from IPython.display import Markdown
from resume_builder import *

projects = pl.read_parquet("default_tables/projects.parquet")
skills = pl.read_parquet("default_tables/skills.parquet")
work = pl.read_parquet("default_tables/work.parquet")
education = pl.read_parquet("default_tables/education.parquet")
contact = pl.read_parquet("default_tables/contact.parquet")

```

```{python}
#| tags: [parameters]
name_id = contact.select("name").item()
email_id = contact.select("email").item()
github_id = contact.select("github").item()
linkedin_id = contact.select("linkedin").item()
telephone_id = contact.select("phone").item()
```


`{python} Markdown(f'# {name_id}')`


:::: {.columns}

::: {.column width="22%"}
`{python} Markdown(f'[{email_id}](mailto:{email_id})')`
:::

::: {.column width="1%"}
:::

::: {.column width="22%"}
`{python} Markdown(f'[Github](https://github.com/{github_id})')`
:::

::: {.column width="1%"}
:::

::: {.column width="22%"}
`{python} Markdown(f'[LinkedIn.com](https://www.linkedin.com/in/{linkedin_id}/)')`
:::

::: {.column width="1%"}
:::


::: {.column width="22%"}
`{python} Markdown(f'[{telephone_id}](tel:{telephone_id})')`
:::


::::


## EDUCATION

```{python}
e1 = education.slice(0,1)
s1 = e1.select('school').item()
d1 = e1.select('degree').item()
ex1 = e1.select(pl.col('expected').dt.to_string("%b %Y")).item()
```

`{python} Markdown(f'**{d1}** <br> *{s1}* [*Expected: {ex1}*]')`{.cvdate}


## SKILLS

```{python}
#| output: asis
topics = skills.group_by("topic", maintain_order=True).len()
ntopics = topics.shape[0]

slist1 = skills\
  .join(topics.slice(0, 1), on='topic')\
  .with_columns(
    ("**"+pl.col("skill")+"**"+ " (" + pl.col("details") + ")")\
      .alias("skill_items"))\
  .select("skill_items").to_series().to_list()

slist2 = skills\
  .join(topics.slice(1, 1), on='topic')\
  .with_columns(
    ("**"+pl.col("skill")+"**"+ " (" + pl.col("details") + ")")\
      .alias("skill_items"))\
  .select("skill_items").to_series().to_list()

slist3 = skills\
  .join(topics.slice(2, 1), on='topic')\
  .with_columns(
    ("**"+pl.col("skill")+"**"+ " (" + pl.col("details") + ")")\
      .alias("skill_items"))\
  .select("skill_items").to_series().to_list()

slist4 = skills\
  .join(topics.slice(2, 1), on='topic')\
  .with_columns(
    ("**"+pl.col("skill")+"**"+ " (" + pl.col("details") + ")")\
      .alias("skill_items"))\
  .select("skill_items").to_series().to_list()

s1 = "- " + ", ".join(slist1)
s2 = "- " + ", ".join(slist2)
s3 = "- " + ", ".join(slist3)
s4 = "- " + ", ".join(slist4)

if ntopics == 1:
  out = Markdown(f"""
{s1}
""")
elif ntopics == 2:
  out = Markdown(f"""
{s1}
{s2}
""")
elif ntopics == 3:
  out = Markdown(f"""
{s1}
{s2}
{s3}
""")
elif ntopics == 4:
  out = Markdown(f"""
{s1}
{s2}
{s3}
{s4}
""")
else:
  sys.exit("Too many topics. At most 4.")

out
```

## WORK EXPERIENCE

```{python}
work1 = work.slice(0,1)
work2 = work.slice(1,1)
work3 = work.slice(2,1)
work4 = work.slice(3,1)
work5 = work.slice(4,1)
```


```{python}
work_chunk(work1)
```

```{python}
work_chunk(work1)
```

```{python}
work_chunk(work3)
```

```{python}
work_chunk(work4)
```

```{python}
work_chunk(work5)
```

## PROJECTS
```{python}
nprojects = projects.shape[0]
```

<!-- project 1 -->

```{python}
#| output: asis
slice_input = min(0, nprojects - 1)
if nprojects < 1:
  out = print("<!--")
else:
  out = Markdown("")
out
```
```{python}
pr_n, pr_p, pr_g, pr_l, pr_s, pr_e = projects_dat(projects.slice(slice_input, 1))
```

:::: {.columns #vtop}
::: {.column width="68%"}

```{python}
Markdown(f'''***{pr_n}***   
*{pr_p}*
''')
```
:::

::: {.column width="30%"}
`{python} Markdown(f'[{pr_s} -- {pr_e}]{{.cvdate}}')`
:::
:::

`{python} Markdown(f'- {pr_l}: [Github Repository]({pr_g})')`

```{python}
#| output: asis
if nprojects < 1:
  out = print("-->")
else:
  out = Markdown("")
out
```

<!-- project 2 -->

```{python}
#| output: asis
slice_input = min(1, nprojects - 1)
if nprojects < 1:
  out = print("<!--")
else:
  out = Markdown("")
out
```
```{python}
pr_n, pr_p, pr_g, pr_l, pr_s, pr_e = projects_dat(projects.slice(slice_input, 1))
```

:::: {.columns #vtop}
::: {.column width="68%"}

```{python}
Markdown(f'''***{pr_n}***   
*{pr_p}*
''')
```
:::

::: {.column width="30%"}
`{python} Markdown(f'[{pr_s} -- {pr_e}]{{.cvdate}}')`
:::
:::

`{python} Markdown(f'- {pr_l}: [Github Repository]({pr_g})')`

```{python}
#| output: asis
if nprojects < 1:
  out = print("-->")
else:
  out = Markdown("")
out
```

<!-- project 3 -->

```{python}
#| output: asis
slice_input = min(2, nprojects - 1)
if nprojects < 3:
  out = print("<!--")
else:
  out = Markdown("")
out
```
```{python}
pr_n, pr_p, pr_g, pr_l, pr_s, pr_e = projects_dat(projects.slice(slice_input, 1))
```

:::: {.columns #vtop}
::: {.column width="68%"}

```{python}
Markdown(f'''***{pr_n}***   
*{pr_p}*
''')
```
:::

::: {.column width="30%"}
`{python} Markdown(f'[{pr_s} -- {pr_e}]{{.cvdate}}')`
:::
:::

`{python} Markdown(f'- {pr_l}: [Github Repository]({pr_g})')`

```{python}
#| output: asis
if nprojects < 3:
  out = print("-->")
else:
  out = Markdown("")
out
```


<!-- project 4 -->

```{python}
#| output: asis
slice_input = min(3, nprojects - 1)
if nprojects < 4:
  out = print("<!--")
else:
  out = Markdown("")
out
```
```{python}
pr_n, pr_p, pr_g, pr_l, pr_s, pr_e = projects_dat(projects.slice(slice_input, 1))
```

:::: {.columns #vtop}
::: {.column width="68%"}

```{python}
Markdown(f'''***{pr_n}***   
*{pr_p}*
''')
```
:::

::: {.column width="30%"}
`{python} Markdown(f'[{pr_s} -- {pr_e}]{{.cvdate}}')`
:::
:::

`{python} Markdown(f'- {pr_l}: [Github Repository]({pr_g})')`

```{python}
#| output: asis
if nprojects < 4:
  out = print("-->")
else:
  out = Markdown("")
out
```



<!-- ::: {.print-only .contact-block}

::: -->

<!-- ## WORK EXPERIENCE{style="page-break-before: always"} -->

<!-- ::: {.no-print}
::: -->

<!-- ::: {.print-only}
## References
Available upon request
::: -->


